from crewai import Task
from textwrap import dedent


class QuizTasks:

    def mcq_questions(self, agent, topic, count, context):
        return Task(
            context=context,
            description=dedent(
                f"""Use the information provided in context about {topic} and generate {count} unique multiple choice questions on the provided topic. 
            Make sure all questions are unique and also increase the difficulty level gradually of every next question you generate. 
            All mcq questions should have four different choices as answer. 
            You also need to assign marks in the range [1,2,3] based on the level of difficulty.
            Make sure all the questions have 1 correct choice and 3 incorrect choices."""
            ),
            expected_output="""You should return a json list of question dictionary in the following format:
                                   {[ 
                                   question_statement: question statement,
                                   associated_marks: associated markers,
                                   difficulty_level: difficulty level,
                                   answers: {
                                            correct: correct choice, 
                                            incorrect: [incorrect choices]
                                        }
                                   ]}""",
            agent=agent,
        )

    def short_questions(self, agent, topic, count, context):
        return Task(
            context=context,
            description=dedent(
                f"""Use the information provided in context about {topic} and generate {count} unique short answer questions. 
            Make sure all questions are unique and also increase the difficulty level gradually of every next question you generate.
            Please provide one-liner answers to the questions generated by you as well.
            You also need to assign marks in the range [2,3,4] based on the level of difficulty.
            Make sure all the questions and answers are precise and in correct format."""
            ),
            expected_output="""You should return a json list of question dictionary in the following format:
                                   {[ 
                                    question_statement: question statement,
                                    associated_marks: associated marks,
                                    difficulty_level: difficulty level,
                                    answer: answer,
                                   ]}""",
            agent=agent,
        )

    def gather_knowledge(self, agent, topic):
        return Task(
            description=dedent(
                f"""Gather all the knowledge available on {topic} and arange it in precise and concise points. 
                Make sure the points provide every bit of information available about {topic}."""
            ),
            expected_output="""You should return a json list of points in the following format:
                                   {
                                    topic: ,
                                    points:[]
                                   }""",
            agent=agent,
        )
